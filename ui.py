import datetime
import functools
import os
import queue
import shutil
import subprocess
import sys
import threading
import tkinter as tk
from tkinter import ttk, messagebox, filedialog, scrolledtext

from PIL import Image, ImageTk

from analyzer import initialize_model, analyze_images
from scanner import scan_folder_async, update_file_list
from utils import log_message


class NSFWAnalyzerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("NSFW Analyzer Pro")
        self.root.geometry("1400x800")

        self.scan_folder_async = functools.partial(scan_folder_async, self)
        self.initialize_model = functools.partial(initialize_model, self)
        self.analyze_images = functools.partial(analyze_images, self)
        self.update_file_list = functools.partial(update_file_list, self)

        # –ë–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–Ω–µ –±–ª–æ–∫–∏—Ä—É—é—â–∏–µ –∑–∞–≥—Ä—É–∑–∫—É)
        self.stop_analysis = False
        self.analysis_thread = None
        self.image_queue = queue.Queue()
        self.model_loaded = False
        self.model = None
        self.libs_loaded = False  # –î–æ–±–∞–≤–ª–µ–Ω–æ
        self.running = True
        self.predict_fn = None  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∞—Ç—Ä–∏–±—É—Ç–∞

        self.all_files = []  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        self.root.after(100, self.process_queue)

        # # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
        # # self.progress = ttk.Progressbar(self.status_bar, mode='indeterminate', length=200)
        # self.progress = ttk.Progressbar(self.status_bar, mode='determinate', length=600, maximum=100)
        # self.progress.pack(side=tk.RIGHT, padx=5)

        self.start_background_loading()
        threading.Thread(target=self.initialize_backend, daemon=True).start()

    def start_background_loading(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É —Ç—è–∂–µ–ª—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""

        def load_in_background():
            try:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ PIL (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –±—É–¥–µ–º –≥—Ä—É–∑–∏—Ç—å –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é)
                from PIL import Image, ImageTk
                self.Image = Image
                self.ImageTk = ImageTk
                self.libs_loaded = True
                log_message("–ë–∞–∑–æ–≤—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã\n")
            except Exception as e:
                log_message(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫: {e}\n")

        threading.Thread(target=load_in_background, daemon=True).start()
        self.root.after(100, self.check_loading_status)

    def check_loading_status(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏"""
        if self.libs_loaded:
            self.finish_ui_setup()
        else:
            self.root.after(100, self.check_loading_status)

    def finish_ui_setup(self):
        """–î–æ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫"""
        # –ó–¥–µ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–≤—å—é –∏ –¥—Ä—É–≥–∏—Ö –∑–∞–≤–∏—Å–∏–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        # self.preview_label = tk.Label(self.preview_frame)
        # self.preview_label.pack(fill=tk.BOTH, expand=True)

        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        self.analyze_button.config(state=tk.NORMAL)

    def initialize_backend(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—è–∂–µ–ª—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ —Ñ–æ–Ω–µ"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ GPU/CPU
        import tensorflow as tf
        devices = tf.config.list_physical_devices()
        self.image_queue.put(("log", f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {devices}\n"))

        # –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∞–Ω–∞–ª–∏–∑–µ
        # self.image_queue.put(("log", "–ú–æ–¥–µ–ª—å –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∞–Ω–∞–ª–∏–∑–µ\n"))

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        self.image_queue.put(("status", "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"))

    def create_widgets(self):
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.control_frame = tk.Frame(self.root)
        self.control_frame.pack(fill=tk.X, padx=5, pady=5)

        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        self.main_paned = tk.PanedWindow(self.root, orient=tk.HORIZONTAL)
        self.main_paned.pack(fill=tk.BOTH, expand=True)

        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å (—Ç–∞–±–ª–∏—Ü–∞ + –ª–æ–≥)
        self.left_paned = tk.PanedWindow(self.main_paned, orient=tk.VERTICAL)
        self.main_paned.add(self.left_paned, width=950)

        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å (–ø—Ä–µ–≤—å—é)
        self.preview_frame = tk.LabelFrame(self.main_paned, text="–ü—Ä–µ–≤—å—é")
        self.main_paned.add(self.preview_frame, width=300)

        # –ü—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        # self.preview_frame = tk.LabelFrame(self.main_paned, text="–ü—Ä–µ–≤—å—é")
        # self.preview_label = tk.Label(self.preview_frame)
        # self.preview_label.pack(fill=tk.BOTH, expand=True)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ (–¥–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ —Å—Ç—Ä–æ–∫–∏)
        # self.preview_frame.bind("<Configure>", self.resize_preview)
        # self.root.bind("<Configure>", lambda e: self.resize_preview())

        # # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        # self.control_frame = tk.Frame(self.root)
        # self.control_frame.pack(fill=tk.X, padx=5, pady=5)

        # –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        tk.Label(self.control_frame, text="–ü–∞–ø–∫–∞:").grid(row=0, column=0, padx=5)
        self.path_entry = tk.Entry(self.control_frame, width=50)
        self.path_entry.grid(row=0, column=1, padx=5, sticky='ew')

        self.browse_button = tk.Button(self.control_frame, text="–û–±–∑–æ—Ä", command=self.browse_folder)
        self.browse_button.grid(row=0, column=2, padx=5)

        tk.Label(self.control_frame, text="–ü–æ—Ä–æ–≥:").grid(row=0, column=3, padx=5)
        self.threshold_slider = tk.Scale(self.control_frame, from_=0.1, to=1.0, resolution=0.01,
                                         orient=tk.HORIZONTAL, length=200)
        self.threshold_slider.set(0.7)
        self.threshold_slider.grid(row=0, column=4, padx=5)

        tk.Label(self.control_frame, text="–§–∏–ª—å—Ç—Ä:").grid(row=0, column=5, padx=5)
        self.filter_var = tk.StringVar(value="all")
        self.filter_combobox = ttk.Combobox(
            self.control_frame,
            textvariable=self.filter_var,
            values=["–í—Å–µ", "–¢–æ–ª—å–∫–æ –ù–Æ", "–¢–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ", "–ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ", "BAD"],  # üëà –¥–æ–±–∞–≤–∏–ª–∏ BAD
            state="readonly",
            width=15
        )

        # self.filter_combobox = ttk.Combobox(self.control_frame, textvariable=self.filter_var,
        #                                     values=["–í—Å–µ", "–¢–æ–ª—å–∫–æ –ù–Æ", "–¢–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ", "–ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ"],
        #                                     state="readonly", width=15)
        self.filter_combobox.grid(row=0, column=6, padx=5)

        self.analyze_button = tk.Button(self.control_frame, text="–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", command=self.toggle_analysis)
        self.analyze_button.grid(row=0, column=7, padx=5)

        self.move_button = tk.Button(
            self.control_frame,
            text="–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å",
            command=self.move_images_by_filter,
            state=tk.DISABLED
        )
        self.move_button.grid(row=0, column=8, padx=5)

        tk.Label(self.control_frame, text="–ú–æ–¥–µ–ª—å:").grid(row=0, column=9, padx=5)
        self.model_type = tk.StringVar(value="yahoo")
        self.model_combobox = ttk.Combobox(
            self.control_frame,
            textvariable=self.model_type,
            values=["Yahoo NSFW", "MobileNetV2", "GantMan NSFW", "NSFW Hub Detector", "TF Hub Detector"],
            state="readonly",
            width=15
        )
        self.model_combobox.grid(row=0, column=10, padx=5)

        # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.tree_frame = tk.Frame(self.left_paned)
        self.left_paned.add(self.tree_frame, height=500)

        self.tree_scroll_y = ttk.Scrollbar(self.tree_frame)
        self.tree_scroll_y.pack(side=tk.RIGHT, fill=tk.Y)

        self.tree_scroll_x = ttk.Scrollbar(self.tree_frame, orient=tk.HORIZONTAL)
        self.tree_scroll_x.pack(side=tk.BOTTOM, fill=tk.X)

        self.result_tree = ttk.Treeview(self.tree_frame,
                                        columns=("#", "–ò–º—è —Ñ–∞–π–ª–∞", "–ü—É—Ç—å", "–†–∞–∑–º–µ—Ä", "–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è", "–ü–æ—Ä–æ–≥", "–°—Ç–∞—Ç—É—Å"),
                                        show="headings",
                                        yscrollcommand=self.tree_scroll_y.set,
                                        xscrollcommand=self.tree_scroll_x.set)

        self.result_tree.pack(fill=tk.BOTH, expand=True)

        self.tree_scroll_y.config(command=self.result_tree.yview)
        self.tree_scroll_x.config(command=self.result_tree.xview)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
        columns = {
            "#": {"width": 50, "anchor": "center"},
            "–ò–º—è —Ñ–∞–π–ª–∞": {"width": 200},
            "–ü—É—Ç—å": {"width": 300},
            "–†–∞–∑–º–µ—Ä": {"width": 80, "anchor": "e"},
            "–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è": {"width": 120},
            "–ü–æ—Ä–æ–≥": {"width": 80, "anchor": "center"},
            "–°—Ç–∞—Ç—É—Å": {"width": 60, "anchor": "center"}
        }

        # for col, params in columns.items():
        #     self.result_tree.heading(col, text=col)
        #     self.result_tree.column(col, **params)

        for col, params in columns.items():
            self.result_tree.heading(col, text=col,
                                     command=lambda c=col: self.sort_treeview_column(c, False))
            self.result_tree.column(col, **params)

        # –¢–µ–≥–∏ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
        self.result_tree.tag_configure('nude', background='#ffcccc')
        self.result_tree.tag_configure('safe', background='#ccffcc')

        # –ö–æ–Ω—Å–æ–ª—å –ª–æ–≥–æ–≤
        self.log_frame = tk.LabelFrame(self.left_paned, text="–õ–æ–≥")
        self.left_paned.add(self.log_frame, height=200)

        self.log_console = scrolledtext.ScrolledText(self.log_frame)
        self.log_console.pack(fill=tk.BOTH, expand=True)

        # # –ü—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.preview_label = tk.Label(self.preview_frame)
        self.preview_label.pack(fill=tk.BOTH, expand=True)

        # # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        # status_frame = tk.Frame(self.root)
        # status_frame.pack(side="bottom", fill="x")
        # #
        # self.status_bar = tk.Label(status_frame, text="", anchor="w", width=60)  # —Ñ–∏–∫—Å —à–∏—Ä–∏–Ω–∞
        # self.status_bar.pack(side="left", padx=5)
        # #
        # # self.progress = ttk.Progressbar(status_frame, orient="horizontal", length=300, mode="determinate")
        # # self.progress.pack(side="right", padx=5)
        #
        # self.status_var = tk.StringVar()
        # self.status_bar = tk.Label(self.root, textvariable=self.status_var, bd=1, relief=tk.SUNKEN, anchor=tk.W)
        # self.status_bar.pack(fill=tk.X, side=tk.BOTTOM)
        # #
        # # # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
        # # # self.progress = ttk.Progressbar(self.status_bar, mode='indeterminate', length=200)
        # self.progress = ttk.Progressbar(self.status_bar, mode='determinate', length=600, maximum=100)
        # self.progress.pack(side=tk.RIGHT, padx=5)

        # –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–±–∞—Ä–∞
        status_frame = tk.Frame(self.root, bd=1, relief=tk.SUNKEN)
        status_frame.pack(side="bottom", fill="x")

        # –°—Ç–∞—Ç—É—Å-—Ç–µ–∫—Å—Ç
        self.status_var = tk.StringVar()
        self.status_bar = tk.Label(status_frame, textvariable=self.status_var, anchor="w", width=60)
        self.status_bar.pack(side="left", padx=5)

        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress = ttk.Progressbar(status_frame, mode="determinate", length=300, maximum=100)
        self.progress.pack(side="right", padx=5)

        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
        self.result_tree.bind("<Double-1>", self.open_image)
        self.result_tree.bind("<<TreeviewSelect>>", self.show_preview)
        self.filter_var.trace_add('write', self.apply_filter)

        # Enter ‚Äì –æ—Ç–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        self.result_tree.bind("<Return>", self.open_image)
        # F6 ‚Äì –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
        self.root.bind("<F6>", self.move_selected_file_by_filter)
        # Del ‚Äì —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª
        self.root.bind("<Delete>", self.delete_selected_file)

        self.result_tree.tag_configure('mobilenet', background='#e0f7ff')
        self.result_tree.tag_configure('bad', background='#ffe680')
        self.result_tree.tag_configure('nude', background='#ffcccc')
        self.result_tree.tag_configure('safe', background='#ccffcc')

    def mark_bad_file(self, img_path):
        # –ù–∞—Ö–æ–¥–∏–º item –≤ Treeview
        for item in self.result_tree.get_children():
            values = list(self.result_tree.item(item)['values'])
            if values[2] == img_path:
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤ Treeview
                self.result_tree.set(item, "–ù–Æ", "BAD")
                self.result_tree.item(item, tags=("bad",))
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤ all_files
                for i, f in enumerate(self.all_files):
                    if f[2] == img_path:
                        updated = list(f)
                        updated[6] = "BAD"
                        self.all_files[i] = tuple(updated)
                        break
                break

    def move_selected_file_by_filter(self, event=None):
        folder_path = self.path_entry.get()
        if not folder_path:
            return

        filter_type = self.filter_var.get()
        if filter_type == "–¢–æ–ª—å–∫–æ –ù–Æ":
            target_subfolder = "NU"
        elif filter_type == "–ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ":
            target_subfolder = "BAD"
        else:
            messagebox.showinfo("–ò–Ω—Ñ–æ", "–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ '–¢–æ–ª—å–∫–æ –ù–Æ' –∏ '–ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ'")
            return

        selected = self.result_tree.selection()
        if not selected:
            return  # –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ

        target_folder = os.path.join(folder_path, target_subfolder)
        os.makedirs(target_folder, exist_ok=True)

        moved_count = 0
        for item in selected:
            values = self.result_tree.item(item)['values']
            img_path = values[2]
            nude_status = str(values[6]).strip()

            # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ —Ñ–∏–ª—å—Ç—Ä—É
            if filter_type == "–¢–æ–ª—å–∫–æ –ù–Æ" and nude_status != "‚úì":
                continue
            if filter_type == "–ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ" and nude_status in ("‚úì", "‚úó"):
                continue

            try:
                filename = os.path.basename(img_path)
                dst_path = os.path.join(target_folder, filename)
                os.makedirs(os.path.dirname(dst_path), exist_ok=True)
                os.rename(img_path, dst_path)
                log_message(f"[MOVE ONE] {img_path} -> {dst_path}\n", self.log_console)
                self.result_tree.set(item, "–ü—É—Ç—å", dst_path)
                moved_count += 1
            except Exception as e:
                log_message(f"[ERROR MOVE ONE] {img_path}: {e}\n", self.log_console)

        if moved_count > 0:
            self.status_var.set(f"–ü–µ—Ä–µ–º–µ—â—ë–Ω {moved_count} —Ñ–∞–π–ª(–æ–≤) –≤ {target_folder}")

    def delete_selected_file(self, event=None):
        selected = self.result_tree.selection()
        if not selected:
            return
        for item in selected:
            img_path = self.result_tree.item(item)['values'][2]
            try:
                os.remove(img_path)
                log_message(f"[DELETE] {img_path}\n", self.log_console)
                self.result_tree.delete(item)
            except Exception as e:
                log_message(f"[ERROR DELETE] {img_path}: {e}\n", self.log_console)

    def move_images_by_filter(self, *_):
        folder_path = self.path_entry.get()
        if not folder_path:
            return

        filter_type = self.filter_var.get()
        if filter_type == "–¢–æ–ª—å–∫–æ –ù–Æ":
            target_subfolder = "NU"
        elif filter_type == "–ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ":
            target_subfolder = "BAD"
        else:
            messagebox.showinfo("–ò–Ω—Ñ–æ", "–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ '–¢–æ–ª—å–∫–æ –ù–Æ' –∏ '–ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ'")
            return

        target_folder = os.path.join(folder_path, target_subfolder)
        os.makedirs(target_folder, exist_ok=True)

        moved_count = 0
        for item in self.result_tree.get_children():
            values = self.result_tree.item(item)['values']
            img_path = values[2]
            nude_status = str(values[6]).strip()
            # –õ–æ–≥–∏–∫–∞ –æ—Ç–±–æ—Ä–∞ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É
            if filter_type == "–¢–æ–ª—å–∫–æ –ù–Æ" and nude_status != "‚úì":
                continue
            if filter_type == "–ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ" and nude_status in ("‚úì", "‚úó"):
                continue

            try:
                filename = os.path.basename(img_path)
                dst_path = os.path.join(target_folder, filename)
                os.makedirs(os.path.dirname(dst_path), exist_ok=True)
                os.rename(img_path, dst_path)
                log_message(f"[MOVE] {img_path} -> {dst_path}\n", self.log_console)
                self.result_tree.set(item, "–ü—É—Ç—å", dst_path)
                moved_count += 1
            except Exception as e:
                log_message(f"[ERROR MOVE] {img_path}: {e}\n", self.log_console)

        self.status_var.set(f"–ü–µ—Ä–µ–º–µ—â–µ–Ω–æ {moved_count} —Ñ–∞–π–ª–æ–≤ –≤ {target_folder}")
        messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", f"–ü–µ—Ä–µ–º–µ—â–µ–Ω–æ {moved_count} —Ñ–∞–π–ª–æ–≤")

    def move_nude_images(self):
        folder_path = self.path_entry.get()
        if not folder_path:
            return

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É NU –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        target_folder = os.path.join(folder_path, "NU")
        os.makedirs(target_folder, exist_ok=True)

        moved_count = 0

        for item in self.result_tree.get_children():
            if self.result_tree.set(item, "–ù–Æ") == "‚úì":
                src_path = self.result_tree.item(item)['values'][2]
                rel_path = os.path.relpath(src_path, folder_path)
                dst_path = os.path.join(target_folder, rel_path)

                # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∞–ø–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                os.makedirs(os.path.dirname(dst_path), exist_ok=True)

                try:
                    shutil.move(src_path, dst_path)
                    moved_count += 1
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ
                    self.result_tree.set(item, "–ü—É—Ç—å", dst_path)
                except Exception as e:
                    log_message(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è {src_path}: {e}\n")

        self.status_var.set(f"–ü–µ—Ä–µ–º–µ—â–µ–Ω–æ {moved_count} —Ñ–∞–π–ª–æ–≤ –≤ {target_folder}")
        messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", f"–ü–µ—Ä–µ–º–µ—â–µ–Ω–æ {moved_count} —Ñ–∞–π–ª–æ–≤")

    def browse_folder(self):
        folder_path = filedialog.askdirectory()
        if not folder_path:
            return

        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.result_tree.delete(*self.result_tree.get_children())
        self.path_entry.delete(0, tk.END)
        self.path_entry.insert(0, folder_path)
        self.all_files.clear()

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(
            target=self.scan_folder_async,
            args=(folder_path,),
            daemon=True
        ).start()

    def load_images_from_folder(self, folder_path):
        self.result_tree.delete(*self.result_tree.get_children())
        if not folder_path:
            return

        supported_formats = ('.png', '.jpg', '.jpeg', '.bmp', '.gif')
        file_count = 0

        for root, _, files in os.walk(folder_path):
            for file in files:
                if file.lower().endswith(supported_formats):
                    file_count += 1
                    img_path = os.path.join(root, file)
                    stat = os.stat(img_path)
                    size = self.convert_size(stat.st_size)
                    mtime = datetime.datetime.fromtimestamp(stat.st_mtime).strftime('%Y-%m-%d %H:%M')

                    self.result_tree.insert("", "end", values=(
                        file_count,
                        os.path.basename(img_path),
                        img_path,
                        size,
                        mtime,
                        "",  # –î–ª—è –ø–æ—Ä–æ–≥–∞
                        ""  # –î–ª—è —Å—Ç–∞—Ç—É—Å–∞ –ù–Æ
                    ))

        self.status_var.set(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {file_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

    def toggle_analysis(self):
        if self.analyze_button['text'] == '–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å':
            self.start_analysis()
        else:
            self.stop_analysis = True

    def start_analysis(self):
        if not self.path_entry.get():
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return

        try:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–æ–º
            if not hasattr(self, 'predict_fn'):
                log_message("‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏...\n", self.log_console)
                self.initialize_model()

            model_name = self.model_type.get()
            log_message(f"üîß –ú–æ–¥–µ–ª—å {model_name} –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ\n", self.log_console)

        except Exception as e:
            log_message(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}\n", self.log_console)
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å:\n{str(e)}")
            return

        # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –º–µ—Ç–æ–¥–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        self.stop_analysis = False
        self.analyze_button.config(text="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
        # ...
        self.analysis_thread = threading.Thread(target=self.analyze_images, daemon=True)
        self.analysis_thread.start()

    def process_queue(self):
        if not getattr(self, "running", True):
            return

        try:
            while True:
                task = self.image_queue.get_nowait()

                if isinstance(task, tuple):
                    if task[0] == "update_item":
                        item_id = task[1]
                        values = task[2]

                        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                        try:
                            tree_values = list(self.result_tree.item(item_id, "values"))
                            path = tree_values[2]
                        except Exception:
                            continue  # —Å—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞

                        # –û–±–Ω–æ–≤–ª—è–µ–º Treeview
                        if self.result_tree.winfo_exists():
                            for col, val in values.items():
                                try:
                                    if col == "tag":
                                        self.result_tree.item(item_id, tags=(val,))
                                    else:
                                        self.result_tree.set(item_id, col, val)
                                except tk.TclError:
                                    continue  # —É–¥–∞–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞

                        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–∫–∏
                        try:
                            updated_values = list(self.result_tree.item(item_id, "values"))
                        except Exception:
                            continue

                        # –û–±–Ω–æ–≤–ª—è–µ–º all_files
                        for i, file_data in enumerate(self.all_files):
                            if file_data[2] == path:
                                self.all_files[i] = updated_values
                                break

                    elif task[0] == "log":
                        if self.log_console.winfo_exists():
                            try:
                                self.log_console.insert(tk.END, task[1])
                                self.log_console.see(tk.END)
                            except tk.TclError:
                                pass

                    elif task[0] == "status":
                        self.status_var.set(task[1])

                    elif task[0] == "scan_complete":
                        file_count = task[1]
                        self.status_var.set(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {file_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ì–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É")
                        self.progress.stop()
                        self.analyze_button.config(state=tk.NORMAL)

                    elif task[0] == "analysis_complete":
                        self.analyze_button.config(text="–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", state=tk.NORMAL)
                        self.move_button.config(state=tk.NORMAL)

                    elif task[0] == "progress":
                        current = task[1]
                        self.progress["value"] = current
                        self.progress.update()

                    elif task[0] == "mark_bad":
                        bad_path = task[1]
                        self.mark_bad_file(bad_path)


        except queue.Empty:
            pass

        if self.running:
            self.root.after(100, self.process_queue)

    def apply_filter2(self, *args):
        if getattr(self, "analysis_running", False):
            messagebox.showwarning("–ê–Ω–∞–ª–∏–∑", "–ù–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å —Ñ–∏–ª—å—Ç—Ä –≤–æ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞.")
            return

        filter_type = self.filter_var.get()

        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        self.result_tree.delete(*self.result_tree.get_children())

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å—Ç—Ä–æ–∫–∏
        for file_data in self.all_files:
            nude_status = str(file_data[6]).strip()

            if filter_type == "–¢–æ–ª—å–∫–æ –ù–Æ" and nude_status != "‚úì":
                continue
            elif filter_type == "–¢–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ" and nude_status != "‚úó":
                continue
            elif filter_type == "–ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ" and nude_status in ("‚úì", "‚úó"):
                continue

            self.result_tree.insert("", "end", values=file_data)

        self.update_highlighting()

    def apply_filter(self, *args):
        if getattr(self, "analysis_running", False):
            messagebox.showwarning("–ê–Ω–∞–ª–∏–∑", "–ù–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å —Ñ–∏–ª—å—Ç—Ä –≤–æ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞.")
            return

        filter_type = self.filter_var.get()
        self.result_tree.delete(*self.result_tree.get_children())

        for file_data in self.all_files:
            nude_status = str(file_data[6]).strip()

            if filter_type == "–¢–æ–ª—å–∫–æ –ù–Æ" and nude_status != "‚úì":
                continue
            elif filter_type == "–¢–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ" and nude_status != "‚úó":
                continue
            elif filter_type == "–ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ" and nude_status in ("‚úì", "‚úó", "BAD"):
                continue
            elif filter_type == "BAD" and nude_status != "BAD":  # üëà –Ω–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä
                continue

            self.result_tree.insert("", "end", values=file_data)

        self.update_highlighting()

    def restore_all_items(self):
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ Treeview"""
        children = self.result_tree.get_children()
        for item in children:
            self.result_tree.reattach(item, '', 'end')

    def update_highlighting(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–¥—Å–≤–µ—Ç–∫—É –≤—Å–µ—Ö –≤–∏–¥–∏–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        for item in self.result_tree.get_children():
            nude_status = self.result_tree.set(item, "–°—Ç–∞—Ç—É—Å")
            tags = ('nude',) if nude_status == "‚úì" else ('safe',) if nude_status == "‚úó" else ()
            self.result_tree.item(item, tags=tags)

    def open_image(self, event):
        selected_item = self.result_tree.selection()
        if selected_item:
            img_path = self.result_tree.item(selected_item[0])['values'][2]
            try:
                if sys.platform.startswith('win'):
                    os.startfile(img_path)
                elif sys.platform.startswith('darwin'):
                    subprocess.call(('open', img_path))
                else:
                    subprocess.call(('xdg-open', img_path))
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")

    def show_preview(self, event=None):
        # –ø–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        selected = self.result_tree.selection()
        if not selected:
            return
        item = selected[0]
        img_path = self.result_tree.item(item)['values'][2]

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å, —á—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è—Ç—å –ø—Ä–∏ —Ä–µ—Å–∞–π–∑–µ (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è)
        self._last_preview_path = img_path

        try:
            img = Image.open(img_path)
            preview_width = self.preview_frame.winfo_width() - 20
            preview_height = self.preview_frame.winfo_height() - 20
            scale = min(preview_width / img.width, preview_height / img.height)
            new_size = (int(img.width * scale), int(img.height * scale))
            img = img.resize(new_size, Image.Resampling.LANCZOS)

            tk_img = ImageTk.PhotoImage(img)
            self.preview_label.config(image=tk_img, text="")  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç
            self.preview_label.image = tk_img
        except Exception as e:
            self.preview_label.config(image=None, text="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–≤—å—é: {e}")

    # def resize_preview(self, event=None):
    #     # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—É—â–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞
    #     if hasattr(self, "_last_preview_path") and self._last_preview_path:
    #         try:
    #             img = Image.open(self._last_preview_path)
    #             preview_width = self.preview_frame.winfo_width() - 20
    #             preview_height = self.preview_frame.winfo_height() - 20
    #             scale = min(preview_width / img.width, preview_height / img.height)
    #             new_size = (int(img.width * scale), int(img.height * scale))
    #             img = img.resize(new_size, Image.Resampling.LANCZOS)
    #             tk_img = ImageTk.PhotoImage(img)
    #             self.preview_label.config(image=tk_img)
    #             self.preview_label.image = tk_img
    #         except Exception as e:
    #             print(f"–û—à–∏–±–∫–∞ —Ä–µ—Å–∞–π–∑–∞ –ø—Ä–µ–≤—å—é: {e}")

    def on_close(self):
        self.running = False
        self.stop_analysis = True

        # –í—ã–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏ –∏–∑ –ø–∞–º—è—Ç–∏
        if hasattr(self, 'n2'):
            del self.n2
        if hasattr(self, 'mobilenet_model'):
            del self.mobilenet_model
        if hasattr(self, 'tfhub_model'):
            del self.tfhub_model

        self.running = False  # –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç process_queue
        self.stop_analysis = True  # –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑

        # –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –î–û –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        with self.image_queue.mutex:
            self.image_queue.queue.clear()

        # –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
        if self.analysis_thread and self.analysis_thread.is_alive():
            print("‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞...")
            self.analysis_thread.join(timeout=3)

        # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ —É–Ω–∏—á—Ç–æ–∂–∏—Ç—å –æ–∫–Ω–æ
        self.root.destroy()
